/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
    private:
    std::unordered_map<int, Node*> mp;
public:
    Node* cloneGraph(Node* node) {
        if (!node) return nullptr;
        Node *curr = new Node(node->val);
        mp[curr->val] = curr;
        
        for (Node *neighbor : node->neighbors) {
            if (mp[neighbor->val])
                curr->neighbors.emplace_back(mp[neighbor->val]);
            else
                curr->neighbors.emplace_back(cloneGraph(neighbor));
        }
        return curr;
        
    }
};
